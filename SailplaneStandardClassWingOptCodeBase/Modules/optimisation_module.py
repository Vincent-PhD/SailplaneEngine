from geneticalgorithm import geneticalgorithm as gan
import numpy as np
from Modules.wing_planform_generation_module import get_wing_performance


def optimise_wing(
    Constraints: list[list, list, list, list, list, list],
    SelectedOptimisationMethod: str,
):
    if SelectedOptimisationMethod == "GeneticAlgorithm":
        algorithm_param = {
            "max_num_iteration": 250,
            "population_size": 250,
            "mutation_probability": 0.05,
            "elit_ratio": 0.07,
            "crossover_probability": 0.5,
            "parents_portion": 0.5,
            "crossover_type": "uniform",
            "max_iteration_without_improv": 15,
        }

        lw = -1
        uw = 1

        varbound = np.array(
            [
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (lw, uw),
                (0.820000, 0.820000),
                (0.800000, 0.800000),
                (0.700000, 0.700000),
                (0.535000, 0.535000),
                (0.419000, 0.419000),
                (0.210000, 0.210000),
                (2.200000, 2.200000),
                (1.980000, 1.980000),
                (1.800000, 1.800000),
                (0.890000, 0.890000),
                (0.670000, 0.670000),
            ]
        )

        vartype = np.array(
            [
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
                ["real"],
            ]
        )

        model = gan(
            function=optimise_spm,
            dimension=113,  # 113
            variable_type_mixed=vartype,
            variable_boundaries=varbound,
            algorithm_parameters=algorithm_param,
            function_timeout=60 * 10,
        )

        # model.run()
    elif SelectedOptimisationMethod == "ParticleSwarm":
        pass
    else:
        RuntimeWarning
